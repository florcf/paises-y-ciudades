{"version":3,"sources":["js/questions.js","js/map.js","js/charts.js","js/index.js"],"names":["gameData","countries","name","code","cities","cityCode","location","schoolName","schoolLocation","mymap","L","map","setView","tileLayer","attribution","minZoom","maxZoom","id","addTo","marker","bindPopup","openPopup","flyTo","remove","getCityLocation","countryCode","cityName","filter","country","city","moveMap","cityElement","dataset","firstElementChild","textContent","pieChartData","pieChartOptions","pieChart","lineChartData","lineChartOptions","lineChart","drawChart","google","visualization","DataTable","addColumn","title","titleTextStyle","color","width","height","PieChart","document","getElementById","draw","curveType","legend","position","vAxes","hAxes","LineChart","updatePieChart","element","countryName","getDistinctValues","includes","rowIndex","getFilteredRows","column","value","relationsCellValue","getValue","setValue","addRow","updateLineChart","game","time","addRows","charts","load","packages","setOnLoadCallback","window","addEventListener","playButton","disabled","data","querySelector","play","random","array","Math","floor","length","levelSelect","setIntervalId","level","nQuestions","gameNumber","cleanGameSection","timer","setInterval","getQuestions","contCorrect","$","draggable","cursor","cursorAt","bottom","containment","revert","droppable","drop","event","ui","children","addClass","seconds","endGame","accept","countryDataCode","querySelectorAll","forEach","hasChildNodes","child","span","removeChild","firstChild","text","createTextNode","appendChild","cont","questions","question","push","cloneTemplate","template","div","content","titleElement","clones","item","setAttribute","clone","importNode","showMessyClones","messyClones","clearInterval"],"mappings":"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","file":"js.78e8f88c.js","sourceRoot":"../src","sourcesContent":["export const gameData = {\n    countries: [{\n        name: 'España',\n        code: '01',\n        cities: [{\n            name: 'Madrid',\n            cityCode: '01',\n            location: [40.416861, -3.703694]\n        },\n        {\n            name: 'Barcelona',\n            cityCode: '02',\n            location: [41.40751633497433, 2.166275245394729]\n        },\n        {\n            name: 'Valencia',\n            cityCode: '03',\n            location: [39.47796176100393, -0.37525270105231295]\n        }\n        ]\n    }, {\n        name: 'Holanda',\n        code: '02',\n        cities: [{\n            name: 'Amsterdam',\n            cityCode: '01',\n            location: [52.376175860546816, 4.891594167657173]\n        },\n        {\n            name: 'Eindhoven',\n            cityCode: '02',\n            location: [51.44205412633434, 5.476260089368771]\n        },\n        {\n            name: 'Utrech',\n            cityCode: '03',\n            location: [52.09781488629545, 5.103770852989115]\n        }\n        ]\n    }, {\n        name: 'Bélgica',\n        code: '03',\n        cities: [{\n            name: 'Bruselas',\n            cityCode: '01',\n            location: [50.84942702730108, 4.346549111821402]\n        },\n        {\n            name: 'Gante',\n            cityCode: '02',\n            location: [51.05452574475724, 3.7227179808364745]\n        },\n        {\n            name: 'Brujas',\n            cityCode: '03',\n            location: [51.20710545849288, 3.2226791050325256]\n        }\n        ]\n    }, {\n        name: 'Italia',\n        code: '04',\n        cities: [{\n            name: 'Roma',\n            cityCode: '01',\n            location: [41.90065677345738, 12.474819649115792]\n        },\n        {\n            name: 'Venecia',\n            cityCode: '02',\n            location: [45.43844843417041, 12.325616073942145]\n        },\n        {\n            name: 'Bari',\n            cityCode: '03',\n            location: [41.12538427082312, 16.870427192774788]\n        }\n        ]\n    }, {\n        name: 'Francia',\n        code: '05',\n        cities: [{\n            name: 'Paris',\n            cityCode: '01',\n            location: [48.861334125665564, 2.344118242841462]\n        },\n        {\n            name: 'Nantes',\n            cityCode: '02',\n            location: [47.22059871416357, -1.5497582786226543]\n        },\n        {\n            name: 'Grenoble',\n            cityCode: '03',\n            location: [45.189409400839516, 5.726315958097291]\n        }\n        ]\n    }, {\n        name: 'Inglaterra',\n        code: '06',\n        cities: [{\n            name: 'Londres',\n            cityCode: '01',\n            location: [51.50103114975856, -0.12412764052064064]\n        },\n        {\n            name: 'New Castle',\n            cityCode: '02',\n            location: [54.97867270905034, -1.6171161843340462]\n        },\n        {\n            name: 'Bournemouth',\n            cityCode: '03',\n            location: [50.7190511018102, -1.8805220675395902]\n        }\n        ]\n    }, {\n        name: 'Croacia',\n        code: '07',\n        cities: [{\n            name: 'Split',\n            cityCode: '01',\n            location: [43.50976192369124, 16.43773258851578]\n        },\n        {\n            name: 'Zadar',\n            cityCode: '02',\n            location: [44.11973038175231, 15.23132452030295]\n        },\n        {\n            name: 'Dubrovnik',\n            cityCode: '03',\n            location: [42.64953066702816, 18.093079247684148]\n        }\n        ]\n    }]\n}\n;\n","import { gameData } from './questions.js';\r\n\r\n/** Información para la localización inicial del mapa. */\r\n/** @type {String} */\r\nconst schoolName = 'CIFP César Manrique';\r\n/** @type {Array} */\r\nconst schoolLocation = [28.456099086100803, -16.283138740418725];\r\n\r\n/** Inicializa el mapa de Leaflet\r\n * y establece su localización.\r\n*/\r\nconst mymap = L.map('map-section').setView(schoolLocation, 15);\r\n// Añade la capa, el mapa a mostrar, usando OpenStreetMap\r\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    minZoom: 1,\r\n    maxZoom: 18,\r\n    id: 'leaflet-osm'\r\n}).addTo(mymap);\r\n\r\n/** Añade un marcador. */\r\nlet marker = L.marker(schoolLocation).addTo(mymap)\r\n    .bindPopup(schoolName)\r\n    .openPopup();\r\n\r\n/**\r\n * @description Cambia la posición del mapa con un efecto vuelo.\r\n * Elimina la marca anterior y añade otra.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {String} [name=schoolName]\r\n * @param {Array} [location=schoolLocation]\r\n */\r\nfunction map (name = schoolName, location = schoolLocation) {\r\n    mymap.flyTo(location, 15);\r\n    marker.remove();\r\n    marker = L.marker(location).addTo(mymap)\r\n        .bindPopup(name)\r\n        .openPopup();\r\n}\r\n\r\n/**\r\n * @description Obtiene las coordenadas de una ciudad.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {String} countryCode\r\n * @param {String} cityName\r\n * @return {Array} Coordenadas.\r\n */\r\nconst getCityLocation = (countryCode, cityName) => {\r\n    return gameData.countries.filter(country => {\r\n        return country.code === countryCode;\r\n    }).map(country => {\r\n        return country.cities.filter(city => {\r\n            return city.name === cityName;\r\n        }).map(city => {\r\n            return city.location;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * @description Actualiza el mapa cuando se ha relacionado\r\n * una ciudad con el país que le corresponde.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {HTMLDivElement} cityElement\r\n */\r\nfunction moveMap (cityElement) {\r\n    const countryCode = cityElement.dataset.code;\r\n    const cityName = cityElement.firstElementChild.textContent;\r\n    const location = getCityLocation(countryCode, cityName);\r\n    map(cityName, location[0][0]);\r\n}\r\n\r\nexport {\r\n    map,\r\n    moveMap\r\n}\r\n;\r\n","import { gameData } from './questions.js';\r\n\r\nlet pieChartData;\r\nlet pieChartOptions;\r\nlet pieChart;\r\n\r\nlet lineChartData;\r\nlet lineChartOptions;\r\nlet lineChart;\r\n\r\n// Load the Visualization API and the corechart package.\r\ngoogle.charts.load('current', { packages: ['corechart'] });\r\n\r\n/**\r\n * @description Callback that creates and populates a data table,\r\n * instantiates the pie chart, passes in the data and\r\n * draws it.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nfunction drawChart () {\r\n    /**\r\n     * Pie Chart\r\n     */\r\n\r\n    // Create the data table.\r\n    pieChartData = new google.visualization.DataTable();\r\n    pieChartData.addColumn('string', 'Country');\r\n    pieChartData.addColumn('number', 'Relations');\r\n    // Set chart options\r\n    pieChartOptions = {\r\n        title: 'Ocurrencias De Países',\r\n        titleTextStyle: {\r\n            color: '#007965'\r\n        },\r\n        width: 400,\r\n        height: 300\r\n    };\r\n    // Instantiate and draw our chart, passing in some options.\r\n    pieChart = new google.visualization.PieChart(document.getElementById('pie-chart'));\r\n    pieChart.draw(pieChartData, pieChartOptions);\r\n\r\n    /**\r\n     * Line Chart\r\n     */\r\n\r\n    // Create the data table.\r\n    lineChartData = new google.visualization.DataTable();\r\n    lineChartData.addColumn('number', 'Intentos');\r\n    lineChartData.addColumn('number', 'Tiempos');\r\n    // Set chart options\r\n    lineChartOptions = {\r\n        title: 'Tiempos Por Partida',\r\n        curveType: 'function',\r\n        legend: { position: 'rigth' },\r\n        vAxes: {\r\n            0: { title: 'Tiempo' }\r\n        },\r\n        hAxes: {\r\n            0: { title: 'Intentos' }\r\n        },\r\n        width: 800,\r\n        height: 300\r\n    };\r\n    // Instantiate and draw our chart, passing in some options.\r\n    lineChart = new google.visualization.LineChart(document.getElementById('line-chart'));\r\n    lineChart.draw(lineChartData, lineChartOptions);\r\n}\r\n\r\n/**\r\n * @description Actualiza el gráfico circular.\r\n * Se obtiene el nombre del país con el código del elemento que recibe.\r\n * Si el país no se muestra todavía en el gráfico, se añade y se indica que es la primera vez.\r\n * Si el país ya estaba en el gráfico, se obtiene para actualizar el número de veces sumándole uno.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {HTMLDivElement} element\r\n */\r\nfunction updatePieChart (element) {\r\n    const countryCode = element.dataset.code;\r\n    const countryName = gameData.countries.filter(country => country.code === countryCode).map(country => country.name)[0];\r\n\r\n    const chartCountryValues = pieChartData.getDistinctValues(0);\r\n    if (!chartCountryValues.includes(countryName)) {\r\n        pieChartData.addRow([countryName, 1]);\r\n    } else {\r\n        const rowIndex = pieChartData.getFilteredRows([{\r\n            column: 0,\r\n            value: countryName\r\n        }])[0];\r\n        const relationsCellValue = pieChartData.getValue(rowIndex, 1);\r\n        pieChartData.setValue(rowIndex, 1, relationsCellValue + 1);\r\n    }\r\n\r\n    pieChart.draw(pieChartData, pieChartOptions);\r\n}\r\n\r\n/**\r\n * @description Actualiza el gráfico de líneas.\r\n * Simplemente se añade una nueva fila con el número de la partida\r\n * y el tiempo transcurrido.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {*} game\r\n * @param {*} time\r\n */\r\nfunction updateLineChart (game, time) {\r\n    lineChartData.addRows([\r\n        [game, time]\r\n    ]);\r\n    lineChart.draw(lineChartData, lineChartOptions);\r\n}\r\n\r\nexport {\r\n    drawChart,\r\n    updatePieChart,\r\n    updateLineChart\r\n}\r\n;\r\n","import { gameData } from './questions.js';\r\nimport { map, moveMap } from './map.js';\r\nimport { drawChart, updatePieChart, updateLineChart } from './charts.js';\r\n\r\n// Set a callback to run when the Google Visualization API is loaded.\r\ngoogle.charts.setOnLoadCallback(drawChart);\r\n\r\nwindow.addEventListener('load', () => {\r\n    map();\r\n    // Deshabilita el botón de 'Nueva Partida'\r\n    // para que no se pueda iniciar sin seleccionar nivel.\r\n    playButton.disabled = true;\r\n});\r\n\r\n/** @type {Array} */\r\n/** Información de cada país. */\r\nconst data = gameData.countries;\r\n\r\nconst playButton = document.querySelector('button');\r\nplayButton.addEventListener('click', () => {\r\n    play();\r\n});\r\n\r\n/**\r\n * @description Genera un número aleatorio según\r\n * la longitud del array que se le pase.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {Array} array\r\n */\r\nconst random = (array) => Math.floor(Math.random() * array.length);\r\n\r\nconst levelSelect = document.querySelector('#level');\r\nlevelSelect.addEventListener('change', () => {\r\n    /* Se habilita o deshabilita el botón de\r\n     * 'Nueva Partida' si se ha seleccionado\r\n     * un nivel o no. */\r\n    if (levelSelect.value !== 'select') {\r\n        playButton.disabled = false;\r\n    } else {\r\n        playButton.disabled = true;\r\n    }\r\n});\r\n\r\n/**\r\n * @description Nivel de dificultad seleccionado\r\n * por el usuario.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nconst level = () => levelSelect.value;\r\n\r\n/** @type {Array} */\r\n/** Guarda los datos de cada partida. */\r\nlet game = [];\r\n/** Número de preguntas en la partida. */\r\nconst nQuestions = () => {\r\n    if (level() === 'easy') { return 3; }\r\n    if (level() === 'normal') { return 5; }\r\n    if (level() === 'difficult') { return 7; }\r\n};\r\n\r\n/** Número de partida. */\r\nlet gameNumber = 0;\r\nlet setIntervalId;\r\n/**\r\n * @description Ejecuta todas las funciones necesarias\r\n * para jugar.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nfunction play () {\r\n    cleanGameSection();\r\n    timer();\r\n\r\n    setIntervalId = setInterval(timer, 1000);\r\n\r\n    // Deshabilita el botón de 'Nueva Partida'\r\n    playButton.disabled = true;\r\n    // Deshabilita el select de nivel.\r\n    levelSelect.disabled = true;\r\n\r\n    // Preguntas para cada partida.\r\n    game = getQuestions();\r\n    cities();\r\n    countries();\r\n\r\n    let contCorrect = 1;\r\n    /** Establece a los elementos con la clase\r\n     * 'city' como draggables.\r\n     */\r\n    $('.city').draggable({\r\n        cursor: 'grabbing',\r\n        cursorAt: { bottom: 0 },\r\n        containment: '#game',\r\n        revert: 'invalid'\r\n    });\r\n    /** Establece a los elementos con la clase\r\n     * 'country' como droppables.\r\n     */\r\n    $('.country').droppable({\r\n        drop: function (event, ui) {\r\n            // Añade una clase CSS al elemento contenedor\r\n            // de la respuesta.\r\n            $(this)\r\n                .children('.answer')\r\n                .addClass('ui-state-highlight correct-answer');\r\n\r\n            // El elemento '.city' deja de ser draggable.\r\n            $(ui.draggable[0]).draggable('option', 'disabled', true);\r\n\r\n            // Se actualiza el mapa.\r\n            moveMap(ui.draggable[0]);\r\n            // Se actualiza el gráfico circular.\r\n            updatePieChart($(this)[0]);\r\n\r\n            // Mejor utilizar las clases??\r\n            // Si todas las respuestas son correctas...\r\n            if (contCorrect === nQuestions()) {\r\n                const time = seconds - 1;\r\n                // Se actualiza el gráfico de líneas.\r\n                updateLineChart(++gameNumber, time);\r\n                // Vuelve a su estado inicial el botón\r\n                // 'Nueva Partida' y el tiempo.\r\n                endGame();\r\n            }\r\n            contCorrect++;\r\n        },\r\n        /** El elemento droppable '.country', solo\r\n         * aceptará el elemento draggable '.city' que\r\n         * tenga el código de país correcto.\r\n         */\r\n        accept: function (event) {\r\n            const countryDataCode = $(this)[0].dataset.code;\r\n            const cityDataCode = event[0].dataset.code;\r\n            if (countryDataCode === cityDataCode) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * @description Elimina los nodos en la sección del juego.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nfunction cleanGameSection () {\r\n    const gameDivElements = [...document.querySelectorAll('#game > div')];\r\n    gameDivElements.forEach(element => {\r\n        if (element.hasChildNodes) {\r\n            const children = [...element.children];\r\n            children.forEach(child => {\r\n                child.remove();\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nlet seconds = 1;\r\n/**\r\n * @description Muestra el tiempo transcurrido en la\r\n * partida.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nfunction timer () {\r\n    const span = document.querySelector('#time');\r\n    span.removeChild(span.firstChild);\r\n    const text = document.createTextNode(seconds++);\r\n    span.appendChild(text);\r\n}\r\n\r\n/**\r\n * @description Genera un array de preguntas aleatorias.\r\n * @author Florencia Del Castillo Fleitas\r\n * @return {Array}\r\n */\r\nfunction getQuestions () {\r\n    const questions = [];\r\n    let cont = 0;\r\n    while (cont < nQuestions()) {\r\n        const question = data[random(data)];\r\n        if (!questions.includes(question)) {\r\n            questions.push(question);\r\n            cont++;\r\n        }\r\n    }\r\n    return questions;\r\n}\r\n\r\n/**\r\n * @description Clonar los templates necesarios para\r\n * mostrar las ciudades y los países.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {Array} array\r\n * @param {String} id\r\n * @return {Array}\r\n */\r\nfunction cloneTemplate (array, id) {\r\n    const template = document.querySelector(`#${id}-template`);\r\n\r\n    const div = template.content.querySelector('div:first-child');\r\n\r\n    const titleElement = template.content.querySelector('h3');\r\n\r\n    const clones = [];\r\n    array.forEach(item => {\r\n        (id === 'cities') ? div.setAttribute('data-code', item[1]) : div.setAttribute('data-code', item.code);\r\n        (id === 'cities') ? titleElement.textContent = item[0].name : titleElement.textContent = item.name;\r\n        const clone = document.importNode(template.content, true);\r\n        clones.push(clone);\r\n    });\r\n    return clones;\r\n}\r\n\r\n/**\r\n * @description Muestra las ciudades y países\r\n * de forma desordenada.\r\n * @author Florencia Del Castillo Fleitas\r\n * @param {*} array\r\n * @param {*} id\r\n */\r\nfunction showMessyClones (array, id) {\r\n    const clones = array;\r\n    const messyClones = [];\r\n    while (messyClones.length < clones.length) {\r\n        const clone = clones[random(clones)];\r\n        if (!messyClones.includes(clone)) {\r\n            messyClones.push(clone);\r\n        }\r\n    }\r\n    const div = document.querySelector(`#${id}`);\r\n    messyClones.forEach(clone => {\r\n        div.appendChild(clone);\r\n    });\r\n}\r\n\r\n/**\r\n * @description Se generan y se muestran los elementos\r\n * de las ciudades.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nfunction cities () {\r\n    const cities = game.map(question => [question.cities[random(question.cities)], question.code]);\r\n    const clones = cloneTemplate(cities, 'cities');\r\n    showMessyClones(clones, 'cities');\r\n}\r\n\r\n/**\r\n * @description Se generan y muestran los elementos\r\n * de los países.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nfunction countries () {\r\n    const clones = cloneTemplate(game, 'countries');\r\n    showMessyClones(clones, 'countries');\r\n}\r\n\r\n/**\r\n * @description El botón de 'Nueva Partida', el\r\n * select para determinar el nivel del juego y\r\n * el tiempo vuelven a su estado inicial.\r\n * @author Florencia Del Castillo Fleitas\r\n */\r\nfunction endGame () {\r\n    playButton.disabled = false;\r\n    levelSelect.disabled = false;\r\n    clearInterval(setIntervalId);\r\n    seconds = 0;\r\n}\r\n"]}